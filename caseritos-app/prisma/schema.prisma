// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  did           String?
  emailVerified DateTime?       @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  Sale          Sale[]
  Review        Review[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @unique
  userId               String  @map("user_id")
  providerAccountId    String  @map("provider_account_id")
  credentialPublicKey  String  @map("credential_public_key")
  counter              Int
  credentialDeviceType String  @map("credential_device_type")
  credentialBackedUp   Boolean @map("credential_backed_up")
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Sale {
  id          String   @id @default(cuid())
  sellerId    String   @map("seller_id")
  productName String   @map("product_name")
  createdAt   DateTime @default(now())

  user User @relation(fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("sales")
}

model Review {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  productName String   @map("product_name")
  rating      Int      @default(0)
  comment     String?
  // if it is null, the review it not correctly reviewed yet
  hash        String?
  createdAt   DateTime @default(now())
  createdBy   String   @map("created_by")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
